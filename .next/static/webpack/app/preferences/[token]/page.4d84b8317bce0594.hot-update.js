"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/preferences/[token]/page",{

/***/ "(app-pages-browser)/./src/lib/preference-links.ts":
/*!*************************************!*\
  !*** ./src/lib/preference-links.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPreferenceLinkUrl: () => (/* binding */ getPreferenceLinkUrl),\n/* harmony export */   getPreferenceOptions: () => (/* binding */ getPreferenceOptions),\n/* harmony export */   getPreferenceSummary: () => (/* binding */ getPreferenceSummary),\n/* harmony export */   getRecipientByToken: () => (/* binding */ getRecipientByToken),\n/* harmony export */   logPreferenceAccess: () => (/* binding */ logPreferenceAccess),\n/* harmony export */   resetToGroupDefaults: () => (/* binding */ resetToGroupDefaults),\n/* harmony export */   sendPreferenceLink: () => (/* binding */ sendPreferenceLink),\n/* harmony export */   updateRecipientPreferences: () => (/* binding */ updateRecipientPreferences),\n/* harmony export */   validatePreferenceToken: () => (/* binding */ validatePreferenceToken)\n/* harmony export */ });\n/* harmony import */ var _supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase/client */ \"(app-pages-browser)/./src/lib/supabase/client.ts\");\n\n/**\n * Gets recipient information by preference token via API call\n * This function works on the client side\n *\n * @param token - The unique preference token from the magic link\n * @returns Promise resolving to recipient with group info or null if token is invalid\n */ async function getRecipientByToken(token) {\n    if (!token || token.trim() === '') {\n        return null;\n    }\n    try {\n        const response = await fetch(\"/api/preferences/\".concat(token));\n        if (!response.ok) {\n            return null;\n        }\n        const { recipient } = await response.json();\n        return recipient;\n    } catch (error) {\n        console.error('Error fetching recipient by token:', error);\n        return null;\n    }\n}\n/**\n * Updates recipient preferences via token (no authentication required)\n * Sets overrides_group_default to true when preferences are changed\n *\n * @param token - The preference token from the magic link\n * @param preferences - The new preference values\n * @returns Promise resolving to boolean indicating success\n */ async function updateRecipientPreferences(token, preferences) {\n    const supabase = (0,_supabase_client__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n    if (!token || token.trim() === '') {\n        throw new Error('Invalid preference token');\n    }\n    // Validate that the token exists and recipient is active\n    const recipient = await getRecipientByToken(token);\n    if (!recipient) {\n        throw new Error('Invalid or expired preference link');\n    }\n    // Check if the new preferences are different from group defaults\n    const overridesGroupDefault = recipient.group ? preferences.frequency !== recipient.group.default_frequency || !arraysEqual(preferences.preferred_channels, recipient.group.default_channels) : true // If no group, any preferences are considered overrides\n    ;\n    const { error } = await supabase.from('recipients').update({\n        frequency: preferences.frequency,\n        preferred_channels: preferences.preferred_channels,\n        content_types: preferences.content_types,\n        overrides_group_default: overridesGroupDefault\n    }).eq('preference_token', token).eq('is_active', true);\n    if (error) {\n        console.error('Error updating recipient preferences:', error);\n        throw new Error('Failed to update preferences');\n    }\n    return true;\n}\n/**\n * Resets recipient preferences to match their group defaults\n *\n * @param token - The preference token from the magic link\n * @returns Promise resolving to boolean indicating success\n */ async function resetToGroupDefaults(token) {\n    const supabase = (0,_supabase_client__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n    if (!token || token.trim() === '') {\n        throw new Error('Invalid preference token');\n    }\n    // Get current recipient and group info\n    const recipient = await getRecipientByToken(token);\n    if (!recipient || !recipient.group) {\n        throw new Error('Invalid preference link or no group assigned');\n    }\n    const { error } = await supabase.from('recipients').update({\n        frequency: recipient.group.default_frequency,\n        preferred_channels: recipient.group.default_channels,\n        content_types: [\n            'photos',\n            'text'\n        ],\n        overrides_group_default: false\n    }).eq('preference_token', token).eq('is_active', true);\n    if (error) {\n        console.error('Error resetting to group defaults:', error);\n        throw new Error('Failed to reset preferences');\n    }\n    return true;\n}\n/**\n * Validates that a preference token is valid and active\n *\n * @param token - The preference token to validate\n * @returns Promise resolving to boolean indicating if token is valid\n */ async function validatePreferenceToken(token) {\n    if (!token || token.trim() === '') {\n        return false;\n    }\n    const recipient = await getRecipientByToken(token);\n    return recipient !== null;\n}\n/**\n * Gets the preference link URL for a given token\n *\n * @param token - The preference token\n * @returns Complete preference link URL\n */ function getPreferenceLinkUrl(token) {\n    const baseUrl = \"http://localhost:3000\" || 0;\n    return \"\".concat(baseUrl, \"/preferences/\").concat(token);\n}\n/**\n * Sends a preference link email to a recipient\n * This is a placeholder implementation - actual email sending will be implemented in CRO-24\n *\n * @param email - Recipient's email address\n * @param name - Recipient's name\n * @param token - Preference token for the magic link\n * @param senderName - Name of the parent sending the link (optional)\n * @returns Promise resolving when email is sent\n */ async function sendPreferenceLink(email, name, token, senderName) {\n    const preferenceUrl = getPreferenceLinkUrl(token);\n    // In a real implementation, this would integrate with an email service like SendGrid\n    const emailContent = generatePreferenceLinkEmail(name, preferenceUrl, senderName);\n    console.log(\"Sending preference link email to \".concat(email, \":\"));\n    console.log(\"Subject: \".concat(emailContent.subject));\n    console.log(\"Body: \".concat(emailContent.body));\n    console.log(\"Link: \".concat(preferenceUrl));\n// TODO: Integrate with actual email service in CRO-24\n// Example implementation:\n// await emailService.send({\n//   to: email,\n//   subject: emailContent.subject,\n//   html: emailContent.html,\n//   text: emailContent.text\n// })\n}\n/**\n * Generates email content for preference link emails\n *\n * @param recipientName - Name of the recipient\n * @param preferenceUrl - Complete preference link URL\n * @param senderName - Name of the parent (optional)\n * @returns Email content object with subject and body\n */ function generatePreferenceLinkEmail(recipientName, preferenceUrl, senderName) {\n    const fromText = senderName ? \"from \".concat(senderName) : '';\n    const subject = \"Set your preferences for baby updates \".concat(fromText);\n    const text = \"\\nHi \".concat(recipientName, \",\\n\\nYou've been added to receive baby updates \").concat(fromText, \"!\\n\\nClick the link below to set your preferences for how often you'd like to receive updates and what type of content you'd like to see:\\n\\n\").concat(preferenceUrl, \"\\n\\nThis link is secure and personal to you - no account or password needed.\\n\\nIf you have any questions, please reply to this email.\\n\\nBest regards,\\nThe Tribe Team\\n  \").trim();\n    const html = '\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\"utf-8\">\\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n  <title>Set Your Baby Update Preferences</title>\\n  <style>\\n    body { font-family: -apple-system, BlinkMacSystemFont, \\'Segoe UI\\', system-ui, sans-serif; line-height: 1.6; color: #333; }\\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\\n    .button { display: inline-block; padding: 12px 24px; background: #4F46E5; color: white; text-decoration: none; border-radius: 6px; margin: 20px 0; }\\n    .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; font-size: 14px; color: #666; }\\n  </style>\\n</head>\\n<body>\\n  <div class=\"container\">\\n    <h1>Hi '.concat(recipientName, \",</h1>\\n\\n    <p>You've been added to receive baby updates \").concat(fromText, \"!</p>\\n\\n    <p>Click the button below to set your preferences for how often you'd like to receive updates and what type of content you'd like to see:</p>\\n\\n    <a href=\\\"\").concat(preferenceUrl, '\" class=\"button\">Set My Preferences</a>\\n\\n    <p>This link is secure and personal to you - no account or password needed.</p>\\n\\n    <p>If you have any questions, please reply to this email.</p>\\n\\n    <div class=\"footer\">\\n      <p>Best regards,<br>The Tribe Team</p>\\n      <p><small>This email was sent because you were added as a recipient for baby updates. If you believe this was sent in error, please contact the sender.</small></p>\\n    </div>\\n  </div>\\n</body>\\n</html>\\n  ').trim();\n    return {\n        subject,\n        body: text,\n        html,\n        text\n    };\n}\n/**\n * Gets recipient preference summary for display\n * Shows current preferences and indicates if they override group defaults\n *\n * @param token - The preference token\n * @returns Promise resolving to preference summary\n */ async function getPreferenceSummary(token) {\n    const recipient = await getRecipientByToken(token);\n    if (!recipient) {\n        return null;\n    }\n    return {\n        recipient,\n        preferences: {\n            frequency: recipient.frequency,\n            channels: recipient.preferred_channels,\n            contentTypes: recipient.content_types\n        },\n        groupDefaults: recipient.group ? {\n            frequency: recipient.group.default_frequency,\n            channels: recipient.group.default_channels\n        } : undefined,\n        isOverriding: recipient.overrides_group_default\n    };\n}\n/**\n * Gets available preference options for display in forms\n */ function getPreferenceOptions() {\n    return {\n        frequencies: [\n            {\n                value: 'every_update',\n                label: 'Every Update',\n                description: 'Get notified immediately for each new update'\n            },\n            {\n                value: 'daily_digest',\n                label: 'Daily Digest',\n                description: 'Receive a summary once per day'\n            },\n            {\n                value: 'weekly_digest',\n                label: 'Weekly Digest',\n                description: 'Receive a summary once per week'\n            },\n            {\n                value: 'milestones_only',\n                label: 'Milestones Only',\n                description: 'Only receive major milestone updates'\n            }\n        ],\n        channels: [\n            {\n                value: 'email',\n                label: 'Email',\n                description: 'Receive updates via email'\n            },\n            {\n                value: 'sms',\n                label: 'SMS',\n                description: 'Receive updates via text message'\n            },\n            {\n                value: 'whatsapp',\n                label: 'WhatsApp',\n                description: 'Receive updates via WhatsApp'\n            }\n        ],\n        contentTypes: [\n            {\n                value: 'photos',\n                label: 'Photos',\n                description: 'Include photos in updates'\n            },\n            {\n                value: 'text',\n                label: 'Stories & Updates',\n                description: 'Include written stories and descriptions'\n            },\n            {\n                value: 'milestones',\n                label: 'Milestones',\n                description: 'Include milestone achievements and growth tracking'\n            }\n        ]\n    };\n}\n/**\n * Utility function to compare two arrays for equality\n * Used to determine if preferences override group defaults\n *\n * @param arr1 - First array\n * @param arr2 - Second array\n * @returns Boolean indicating if arrays have same elements\n */ function arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    const sorted1 = [\n        ...arr1\n    ].sort();\n    const sorted2 = [\n        ...arr2\n    ].sort();\n    return sorted1.every((val, i)=>val === sorted2[i]);\n}\n/**\n * Logs preference access for analytics (placeholder)\n * In production, this could track usage patterns\n *\n * @param token - The preference token accessed\n * @param action - The action performed ('view', 'update', 'reset')\n */ async function logPreferenceAccess(token, action) {\n    // In production, this could log to analytics service\n    console.log(\"Preference access logged: \".concat(action, \" for token \").concat(token.slice(0, 8), \"...\"));\n// TODO: Implement actual analytics logging if needed\n// This could track:\n// - How often recipients update their preferences\n// - Which preferences are most commonly changed\n// - Usage patterns for optimization\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/preference-links.ts\n"));

/***/ })

});