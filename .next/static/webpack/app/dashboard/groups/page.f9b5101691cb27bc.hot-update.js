"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/groups/page",{

/***/ "(app-pages-browser)/./src/lib/validation/recipients.ts":
/*!******************************************!*\
  !*** ./src/lib/validation/recipients.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CHANNEL_OPTIONS: () => (/* binding */ CHANNEL_OPTIONS),\n/* harmony export */   CONTENT_TYPE_OPTIONS: () => (/* binding */ CONTENT_TYPE_OPTIONS),\n/* harmony export */   FREQUENCY_OPTIONS: () => (/* binding */ FREQUENCY_OPTIONS),\n/* harmony export */   RELATIONSHIP_OPTIONS: () => (/* binding */ RELATIONSHIP_OPTIONS),\n/* harmony export */   addRecipientSchema: () => (/* binding */ addRecipientSchema),\n/* harmony export */   recipientGroupSchema: () => (/* binding */ recipientGroupSchema),\n/* harmony export */   updatePreferencesSchema: () => (/* binding */ updatePreferencesSchema),\n/* harmony export */   updateRecipientSchema: () => (/* binding */ updateRecipientSchema),\n/* harmony export */   validateContactMethod: () => (/* binding */ validateContactMethod),\n/* harmony export */   validateEmail: () => (/* binding */ validateEmail),\n/* harmony export */   validatePhone: () => (/* binding */ validatePhone)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(app-pages-browser)/./node_modules/zod/v3/types.js\");\n\n/**\n * Base schema without refinements for partial updates\n */ const baseRecipientSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Name is required').max(100, 'Name must be less than 100 characters').trim(),\n    email: zod__WEBPACK_IMPORTED_MODULE_0__.string().email('Invalid email address').optional().or(zod__WEBPACK_IMPORTED_MODULE_0__.literal('')),\n    phone: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/, 'Invalid phone number').optional().or(zod__WEBPACK_IMPORTED_MODULE_0__.literal('')),\n    relationship: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'grandparent',\n        'parent',\n        'sibling',\n        'friend',\n        'family',\n        'colleague',\n        'other'\n    ], {\n        errorMap: ()=>({\n                message: 'Please select a valid relationship type'\n            })\n    }),\n    group_id: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid group ID').optional(),\n    frequency: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'every_update',\n        'daily_digest',\n        'weekly_digest',\n        'milestones_only'\n    ]).default('weekly_digest'),\n    preferred_channels: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'email',\n        'sms',\n        'whatsapp'\n    ])).min(1, 'At least one communication channel is required').default([\n        'email'\n    ]),\n    content_types: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'photos',\n        'text',\n        'milestones'\n    ])).min(1, 'At least one content type is required').default([\n        'photos',\n        'text'\n    ])\n});\n/**\n * Validation schema for adding a new recipient\n * Ensures either email or phone is provided, with proper validation for both\n */ const addRecipientSchema = baseRecipientSchema.refine((data)=>{\n    // Ensure at least email or phone is provided\n    return data.email && data.email.trim() !== '' || data.phone && data.phone.trim() !== '';\n}, {\n    message: 'Either email or phone number is required',\n    path: [\n        'email'\n    ] // Show error on email field\n}).refine((data)=>{\n    // If SMS is selected as channel, phone must be provided\n    if (data.preferred_channels.includes('sms') || data.preferred_channels.includes('whatsapp')) {\n        return data.phone && data.phone.trim() !== '';\n    }\n    return true;\n}, {\n    message: 'Phone number is required for SMS or WhatsApp notifications',\n    path: [\n        'phone'\n    ]\n}).refine((data)=>{\n    // If email is selected as channel, email must be provided\n    if (data.preferred_channels.includes('email')) {\n        return data.email && data.email.trim() !== '';\n    }\n    return true;\n}, {\n    message: 'Email address is required for email notifications',\n    path: [\n        'email'\n    ]\n});\n/**\n * Validation schema for updating recipient preferences via magic link\n * Used when recipients update their own preferences without authentication\n */ const updatePreferencesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    frequency: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'every_update',\n        'daily_digest',\n        'weekly_digest',\n        'milestones_only'\n    ], {\n        errorMap: ()=>({\n                message: 'Please select a valid frequency option'\n            })\n    }),\n    preferred_channels: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'email',\n        'sms',\n        'whatsapp'\n    ])).min(1, 'At least one communication channel must be selected'),\n    content_types: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'photos',\n        'text',\n        'milestones'\n    ])).min(1, 'At least one content type must be selected')\n});\n/**\n * Validation schema for creating or updating recipient groups\n */ const recipientGroupSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Group name is required').max(50, 'Group name must be less than 50 characters').trim(),\n    default_frequency: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'every_update',\n        'daily_digest',\n        'weekly_digest',\n        'milestones_only'\n    ]).default('weekly_digest'),\n    default_channels: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'email',\n        'sms',\n        'whatsapp'\n    ])).min(1, 'At least one default channel is required').default([\n        'email'\n    ])\n});\n/**\n * Validation schema for updating existing recipients\n * Similar to add schema but with optional fields for partial updates\n */ const updateRecipientSchema = baseRecipientSchema.partial().refine((data)=>{\n    // If any data is provided, ensure email or phone constraint is still met\n    if (data.email !== undefined || data.phone !== undefined) {\n        const email = data.email || '';\n        const phone = data.phone || '';\n        return email && email.trim() !== '' || phone && phone.trim() !== '';\n    }\n    return true;\n}, {\n    message: 'Either email or phone number must be provided',\n    path: [\n        'email'\n    ]\n});\n// Helper constants for form options\nconst RELATIONSHIP_OPTIONS = [\n    {\n        value: 'grandparent',\n        label: 'Grandparent'\n    },\n    {\n        value: 'parent',\n        label: 'Parent'\n    },\n    {\n        value: 'sibling',\n        label: 'Sibling'\n    },\n    {\n        value: 'friend',\n        label: 'Friend'\n    },\n    {\n        value: 'family',\n        label: 'Family Member'\n    },\n    {\n        value: 'colleague',\n        label: 'Colleague'\n    },\n    {\n        value: 'other',\n        label: 'Other'\n    }\n];\nconst FREQUENCY_OPTIONS = [\n    {\n        value: 'every_update',\n        label: 'Every Update',\n        description: 'Get notified immediately for each new update'\n    },\n    {\n        value: 'daily_digest',\n        label: 'Daily Digest',\n        description: 'Receive a summary once per day'\n    },\n    {\n        value: 'weekly_digest',\n        label: 'Weekly Digest',\n        description: 'Receive a summary once per week'\n    },\n    {\n        value: 'milestones_only',\n        label: 'Milestones Only',\n        description: 'Only receive major milestone updates'\n    }\n];\nconst CHANNEL_OPTIONS = [\n    {\n        value: 'email',\n        label: 'Email',\n        description: 'Receive updates via email'\n    },\n    {\n        value: 'sms',\n        label: 'SMS',\n        description: 'Receive updates via text message'\n    },\n    {\n        value: 'whatsapp',\n        label: 'WhatsApp',\n        description: 'Receive updates via WhatsApp'\n    }\n];\nconst CONTENT_TYPE_OPTIONS = [\n    {\n        value: 'photos',\n        label: 'Photos',\n        description: 'Include photos in updates'\n    },\n    {\n        value: 'text',\n        label: 'Text Updates',\n        description: 'Include text descriptions and stories'\n    },\n    {\n        value: 'milestones',\n        label: 'Milestones',\n        description: 'Include milestone achievements and growth tracking'\n    }\n];\n/**\n * Validates an email address format\n */ function validateEmail(email) {\n    if (!email || email.trim() === '') return null;\n    const emailSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().email();\n    const result = emailSchema.safeParse(email);\n    return result.success ? null : 'Invalid email address';\n}\n/**\n * Validates a phone number format\n */ function validatePhone(phone) {\n    if (!phone || phone.trim() === '') return null;\n    const phoneSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/);\n    const result = phoneSchema.safeParse(phone);\n    return result.success ? null : 'Invalid phone number format';\n}\n/**\n * Validates that at least one contact method (email or phone) is provided\n */ function validateContactMethod(email, phone) {\n    const hasEmail = email && email.trim() !== '';\n    const hasPhone = phone && phone.trim() !== '';\n    if (!hasEmail && !hasPhone) {\n        return 'Either email or phone number is required';\n    }\n    return null;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/validation/recipients.ts\n"));

/***/ })

});