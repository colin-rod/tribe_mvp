import { cn } from '@/lib/utils'
import { forwardRef } from 'react'

export interface GridProps extends React.HTMLAttributes<HTMLDivElement> {
  cols?: 1 | 2 | 3 | 4 | 5 | 6 | 12 | 'auto'
  gap?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'
  responsive?: {
    sm?: 1 | 2 | 3 | 4 | 5 | 6 | 12 | 'auto'
    md?: 1 | 2 | 3 | 4 | 5 | 6 | 12 | 'auto'
    lg?: 1 | 2 | 3 | 4 | 5 | 6 | 12 | 'auto'
    xl?: 1 | 2 | 3 | 4 | 5 | 6 | 12 | 'auto'
  }
}

const Grid = forwardRef<HTMLDivElement, GridProps>(
  ({ className, cols = 1, gap = 'md', responsive, ...props }, ref) => {
    const baseClasses = 'grid'\n\n    const colsClasses = {\n      1: 'grid-cols-1',\n      2: 'grid-cols-2',\n      3: 'grid-cols-3',\n      4: 'grid-cols-4',\n      5: 'grid-cols-5',\n      6: 'grid-cols-6',\n      12: 'grid-cols-12',\n      auto: 'grid-cols-[repeat(auto-fit,minmax(250px,1fr))]',\n    }\n\n    const gapClasses = {\n      none: 'gap-0',\n      sm: 'gap-2',\n      md: 'gap-4',\n      lg: 'gap-6',\n      xl: 'gap-8',\n      '2xl': 'gap-12',\n    }\n\n    const responsiveClasses = responsive ? [\n      responsive.sm && `sm:${colsClasses[responsive.sm].replace('grid-cols-', 'grid-cols-')}`,\n      responsive.md && `md:${colsClasses[responsive.md].replace('grid-cols-', 'grid-cols-')}`,\n      responsive.lg && `lg:${colsClasses[responsive.lg].replace('grid-cols-', 'grid-cols-')}`,\n      responsive.xl && `xl:${colsClasses[responsive.xl].replace('grid-cols-', 'grid-cols-')}`,\n    ].filter(Boolean).join(' ') : ''\n\n    return (\n      <div\n        className={cn(\n          baseClasses,\n          colsClasses[cols],\n          gapClasses[gap],\n          responsiveClasses,\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nGrid.displayName = 'Grid'\n\nexport interface GridItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  span?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 'full' | 'auto'\n  start?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 'auto'\n  end?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 'auto'\n}\n\nconst GridItem = forwardRef<HTMLDivElement, GridItemProps>(\n  ({ className, span, start, end, ...props }, ref) => {\n    const spanClasses = {\n      1: 'col-span-1',\n      2: 'col-span-2',\n      3: 'col-span-3',\n      4: 'col-span-4',\n      5: 'col-span-5',\n      6: 'col-span-6',\n      7: 'col-span-7',\n      8: 'col-span-8',\n      9: 'col-span-9',\n      10: 'col-span-10',\n      11: 'col-span-11',\n      12: 'col-span-12',\n      full: 'col-span-full',\n      auto: 'col-auto',\n    }\n\n    const startClasses = {\n      1: 'col-start-1',\n      2: 'col-start-2',\n      3: 'col-start-3',\n      4: 'col-start-4',\n      5: 'col-start-5',\n      6: 'col-start-6',\n      7: 'col-start-7',\n      8: 'col-start-8',\n      9: 'col-start-9',\n      10: 'col-start-10',\n      11: 'col-start-11',\n      12: 'col-start-12',\n      13: 'col-start-13',\n      auto: 'col-start-auto',\n    }\n\n    const endClasses = {\n      1: 'col-end-1',\n      2: 'col-end-2',\n      3: 'col-end-3',\n      4: 'col-end-4',\n      5: 'col-end-5',\n      6: 'col-end-6',\n      7: 'col-end-7',\n      8: 'col-end-8',\n      9: 'col-end-9',\n      10: 'col-end-10',\n      11: 'col-end-11',\n      12: 'col-end-12',\n      13: 'col-end-13',\n      auto: 'col-end-auto',\n    }\n\n    return (\n      <div\n        className={cn(\n          span && spanClasses[span],\n          start && startClasses[start],\n          end && endClasses[end],\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nGridItem.displayName = 'GridItem'\n\nexport { Grid, GridItem }"