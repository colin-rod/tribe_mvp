#!/bin/bash
# Pre-commit hook to prevent direct commits to main and development branches
# This ensures all changes go through Pull Requests
#
# Installation:
#   ./.githooks/install.sh
#
# Or manually:
#   cp .githooks/pre-commit .git/hooks/pre-commit
#   chmod +x .git/hooks/pre-commit

BRANCH=$(git rev-parse --abbrev-ref HEAD)
PROTECTED_BRANCHES="^(main|development)$"

if [[ "$BRANCH" =~ $PROTECTED_BRANCHES ]]; then
    echo ""
    echo "üö® ====================================================================="
    echo "   PROTECTED BRANCH: Direct commits to '$BRANCH' are BLOCKED"
    echo "===================================================================== üö®"
    echo ""
    echo "This protection applies to ALL developers, Claude Code, and Codex."
    echo ""
    echo "üìã Required workflow:"
    echo "   1. Create a new branch BEFORE making any code changes"
    echo "   2. Make your commits on the feature branch"
    echo "   3. Push and create a Pull Request"
    echo "   4. Merge after review and approval"
    echo ""
    echo "üåø For Linear issues:"
    echo "   git checkout -b claude/CRO-XXX-short-description"
    echo "   Example: git checkout -b claude/CRO-293-add-memory-metadata"
    echo ""
    echo "üåø For Codex work:"
    echo "   git checkout -b codex/feature-description"
    echo "   Example: git checkout -b codex/refactor-auth-flow"
    echo ""
    echo "üåø For bug fixes:"
    echo "   git checkout -b <prefix>/fix-description"
    echo "   Example: git checkout -b claude/fix-auth-redirect-loop"
    echo ""
    echo "üåø For hotfixes (targets main):"
    echo "   git checkout -b hotfix/critical-description"
    echo "   Example: git checkout -b hotfix/security-patch"
    echo ""
    echo "üìñ See CLAUDE.md for complete git workflow guidelines."
    echo ""
    echo "‚ùå Commit aborted - Create a branch first!"
    echo ""
    exit 1
fi

# Allow commit on feature branches
echo "‚úÖ Committing to feature branch: $BRANCH"
exit 0
